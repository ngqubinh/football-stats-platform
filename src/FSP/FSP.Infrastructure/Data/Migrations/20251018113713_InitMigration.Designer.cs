// <auto-generated />
using FSP.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FSP.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251018113713_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FSP.Domain.Entities.Core.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClubId"));

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("Nation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ClubId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.Goalkeeping", b =>
                {
                    b.Property<int>("GoalkeepingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GoalkeepingId"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("CleanSheets")
                        .HasColumnType("integer");

                    b.Property<string>("CleanSheetsPercentage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Draws")
                        .HasColumnType("integer");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("integer");

                    b.Property<string>("GoalsAssistsPer90s")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<int>("MatchPlayed")
                        .HasColumnType("integer");

                    b.Property<string>("Minutes")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NineteenMinutes")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PenaltyKicksAllowed")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PenaltyKicksAttempted")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PenaltyKicksMissed")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PenaltyKicksSaved")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PenaltyKicksSavedPercentage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlayerRefId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SavePercentage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Saves")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShotsOnTargetAgainst")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Starts")
                        .HasColumnType("integer");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("GoalkeepingId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Goalkeepings");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LeagueId"));

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("LeagueId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerId"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Assists")
                        .HasColumnType("integer");

                    b.Property<string>("AssistsPer90s")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("ClubId")
                        .HasColumnType("integer");

                    b.Property<float>("ExpectedAssistedGoals")
                        .HasColumnType("real");

                    b.Property<string>("ExpectedAssistedGoalsPer90")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("ExpectedGoals")
                        .HasColumnType("real");

                    b.Property<string>("ExpectedGoalsPer90")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpectedGoalsPlusAssistedGoalsPer90")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Goals")
                        .HasColumnType("integer");

                    b.Property<int>("GoalsAssists")
                        .HasColumnType("integer");

                    b.Property<string>("GoalsAssistsPer90s")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("GoalsPer90s")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("MatchPlayed")
                        .HasColumnType("integer");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NineteenMinutes")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<float>("NonPenaltyExpectedGoals")
                        .HasColumnType("real");

                    b.Property<string>("NonPenaltyExpectedGoalsPer90")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("NonPenaltyExpectedGoalsPlusAssistedGoals")
                        .HasColumnType("real");

                    b.Property<string>("NonPenaltyExpectedGoalsPlusAssistedGoalsPer90")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NonPenaltyGoals")
                        .HasColumnType("integer");

                    b.Property<string>("NonPenaltyGoalsAssistsPer90s")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("NonPenaltyGoalsPer90s")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("PenaltyKickAttempted")
                        .HasColumnType("integer");

                    b.Property<int>("PenaltyKicksMade")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlayerRefId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ProgressiveCarries")
                        .HasColumnType("integer");

                    b.Property<int>("ProgressivePasses")
                        .HasColumnType("integer");

                    b.Property<int>("ProgressiveReceptions")
                        .HasColumnType("integer");

                    b.Property<int>("RedCards")
                        .HasColumnType("integer");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Starts")
                        .HasColumnType("integer");

                    b.Property<int>("YellowCards")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId");

                    b.HasIndex("ClubId");

                    b.HasIndex("PlayerName", "ClubId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.PlayerDetails", b =>
                {
                    b.Property<int>("PlayerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerDetailId"));

                    b.Property<string>("Born")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Club")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerRefId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PlayerDetailId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerDetails");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.Shooting", b =>
                {
                    b.Property<int>("ShootingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShootingId"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AverageShotDistance")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Goals")
                        .HasColumnType("integer");

                    b.Property<string>("GoalsShots")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("GoalsShotsOnTarget")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NineteenMinutes")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("PenaltyKicksAttempted")
                        .HasColumnType("integer");

                    b.Property<int>("PenaltyKicksMade")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlayerRefId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShotsOnTarget")
                        .HasColumnType("integer");

                    b.Property<string>("ShotsOnTargetPer90")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ShotsOnTargetPercentage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("ShotsTotal")
                        .HasColumnType("integer");

                    b.Property<string>("ShotsTotalPer90")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("ShootingId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Shootings");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.Club", b =>
                {
                    b.HasOne("FSP.Domain.Entities.Core.League", "League")
                        .WithMany("Clubs")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("LeagueId");

                    b.Navigation("League");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.Goalkeeping", b =>
                {
                    b.HasOne("FSP.Domain.Entities.Core.Player", "Player")
                        .WithOne("Goalkeeping")
                        .HasForeignKey("FSP.Domain.Entities.Core.Goalkeeping", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Goalkeeping_Player");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.Player", b =>
                {
                    b.HasOne("FSP.Domain.Entities.Core.Club", "Club")
                        .WithMany("Players")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Player_Club");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.PlayerDetails", b =>
                {
                    b.HasOne("FSP.Domain.Entities.Core.Player", "Player")
                        .WithOne("PlayerDetails")
                        .HasForeignKey("FSP.Domain.Entities.Core.PlayerDetails", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlayerDetails_Player");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.Shooting", b =>
                {
                    b.HasOne("FSP.Domain.Entities.Core.Player", "Player")
                        .WithOne("Shooting")
                        .HasForeignKey("FSP.Domain.Entities.Core.Shooting", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shooting_Player");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.Club", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.League", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("FSP.Domain.Entities.Core.Player", b =>
                {
                    b.Navigation("Goalkeeping");

                    b.Navigation("PlayerDetails");

                    b.Navigation("Shooting");
                });
#pragma warning restore 612, 618
        }
    }
}
