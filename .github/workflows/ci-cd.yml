name: CI/CD Pipeline

on:
  push:
    branches:
      - feature/crawler
      - dev
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published] # Triggers on git tags like v1.1.0

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      # - name: Setup Node.js (for Next.js)
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: "20"
      #     cache: "npm"
      #     cache-dependency-path: frontend/dashboard/package-lock.json

      - name: Build .NET Backend
        run: |
          cd src/FSP
          dotnet restore
          dotnet build --configuration Release

      # - name: Build Next.js Frontend
      #   run: |
      #     cd frontend
      #     npm install
      #     npm run build

      - name: Run Tests (Backend - xUnit example)
        run: |
          cd src/FSP/FSP.Tests
          dotnet test --no-build --verbosity normal || echo "No tests or skipped"

      # - name: Run Tests (Frontend - Jest example)
      #   run: |
      #     cd src/frontend
      #     npm test || echo "No tests or skipped"

      - name: Clean Docker environment
        run: |
          docker system prune -f
          docker builder prune -f

      # GitHub runners ship with Docker Compose v2
      # - name: Install Docker Compose
      #   run: |
      #     sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      #     sudo chmod +x /usr/local/bin/docker-compose

      - name: Run docker-compose to verify
        env:
          RDS_CONNECTION_STRING: ${{ secrets.RDS_CONNECTION_STRING }} # remove if do not user AWS RDS
        run: |
          docker compose -f infra/docker/docker-compose.yml up -d
          for i in {1..30}; do
            if curl --fail http://localhost:5000/health; then
              echo "Backend is healthy"
              break
            fi
            echo "Waiting for backend..."
            sleep 5
          done
          docker compose -f infra/docker/docker-compose.yml logs backend
          docker compose -f infra/docker/docker-compose.yml down

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: src/FSP/bin/Release/net8.0/
          retention-days: 7

  push-images:
    needs: build-and-test
    if: github.event_name == 'release' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Extract metadata (tags, labels) Docker Hub
        id: meta
        # uses: docker/metadata-action@dbef88086f6cef02e264edb7dbf63250c17cf6de9 it make "unable to find version" error
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/football-stats-platform
          tags: |
            type=sha # Adds :sha-<commit>
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }} # :latest only on main
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }} # :dev on dev branch
            type=ref,event=tag # Adds :v1.1.0 for releases

      - name: Extract metadata (tags, labels) for AWS ECR
        id: meta-ecr
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/football-stats-platform-ecr
          tags: |
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }}
            type=ref,event=tag

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container # Use containerd-based driver for GHA cache support

      - name: Build and push to Docker Hub and AWS ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/docker/FSP.Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ steps.meta-ecr.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-prod:
    needs: push-images
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com


      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          RDS_PROD_CONNECTION_STRING: ${{ secrets.RDS_PROD_CONNECTION_STRING }}
        run: |
          # Save SSH key to a temporary file
          echo "$EC2_SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem

          # Log in to ECR on the runner
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          # SSH to EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$EC2_HOST << EOF
            # Log in to ECR on EC2
            aws ecr get-login-password --region $AWS_REGION \
              | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            
            # Pull the latest image from ECR
            docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/football-stats-platform-ecr:latest
            
            # Pull the latest image from Docker Hub
            #docker pull $DOCKERHUB_USERNAME/football-stats-platform:latest
            #docker run -d --name backend-container -p 5000:5000 --env-file /home/ec2-user/.env $DOCKERHUB_USERNAME/football-stats-platform:latest
            
            # Stop and remove existing container (if any)
            sudo docker stop backend-container || true
            sudo docker rm backend-container || true
            
            # Run the new container
            # docker run -d --name backend-container -p 5000:5000 \
            #   --env-file /home/ec2-user/.env \
            #   $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/football-stats-platform:latest
            sudo docker run -d --name backend-container -p 5000:5000 \
              -e ConnectionStrings__postgreSQL="$RDS_PROD_CONNECTION_STRING" \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/football-stats-platform-ecr:latest

            # Clean up unused images
            sudo docker image prune -f
          EOF

          # Clean up SSH key
          rm ssh_key.pem

      - name: Run database migrations
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          RDS_PROD_CONNECTION_STRING: ${{ secrets.RDS_PROD_CONNECTION_STRING }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "$EC2_SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem
          # ssh -o StrictHostKeyChecking=no -i ssh_key.pem ec2-user@$EC2_HOST << EOF
          #   cd /home/ec2-user/app
          #   dotnet ef database update --connection "$RDS_PROD_CONNECTION_STRING"
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$EC2_HOST << EOF
            set -e
            aws ecr get-login-password --region $AWS_REGION \
              | sudo docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com  

            sudo docker run --rm \
              -e ConnectionStrings__postgreSQL="$RDS_PROD_CONNECTION_STRING" \
              --entrypoint dotnet \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/football-stats-platform-ecr:latest \
                ef database update
          EOF
          rm ssh_key.pem
